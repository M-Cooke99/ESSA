// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2024 07:57:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          VGASystem
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module VGASystem_vlg_vec_tst();
// constants                                           
// general purpose registers
reg b0;
reg CLK;
reg ENABLE;
reg RST;
reg treg_SCL;
reg treg_SDA;
reg [0:15] TEST;
reg [8:0] VALUE;
// wires                                               
wire display1;
wire display2;
wire display3;
wire display4;
wire Hsync;
wire [0:15] OUT;
wire out_B;
wire out_G;
wire out_R;
wire SCL;
wire SDA;
wire segA;
wire segB;
wire segC;
wire segD;
wire segE;
wire segF;
wire segG;
wire Vsync;

// assign statements (if any)                          
assign SCL = treg_SCL;
assign SDA = treg_SDA;
VGASystem i1 (
// port map - connection between master ports and signals/registers   
	.b0(b0),
	.CLK(CLK),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.ENABLE(ENABLE),
	.Hsync(Hsync),
	.OUT(OUT),
	.out_B(out_B),
	.out_G(out_G),
	.out_R(out_R),
	.RST(RST),
	.SCL(SCL),
	.SDA(SDA),
	.segA(segA),
	.segB(segB),
	.segC(segC),
	.segD(segD),
	.segE(segE),
	.segF(segF),
	.segG(segG),
	.TEST(TEST),
	.VALUE(VALUE),
	.Vsync(Vsync)
);
initial 
begin 
#1000000 $stop;
end 
// VALUE[ 8 ]
initial
begin
	VALUE[8] = 1'b1;
	VALUE[8] = #60000 1'b0;
	VALUE[8] = #20000 1'b1;
	VALUE[8] = #20000 1'b0;
	VALUE[8] = #40000 1'b1;
	VALUE[8] = #20000 1'b0;
	VALUE[8] = #40000 1'b1;
	VALUE[8] = #40000 1'b0;
	VALUE[8] = #20000 1'b1;
	VALUE[8] = #20000 1'b0;
	VALUE[8] = #40000 1'b1;
	VALUE[8] = #40000 1'b0;
	VALUE[8] = #160000 1'b1;
	VALUE[8] = #20000 1'b0;
	VALUE[8] = #100000 1'b1;
	VALUE[8] = #40000 1'b0;
	VALUE[8] = #20000 1'b1;
	VALUE[8] = #20000 1'b0;
	VALUE[8] = #60000 1'b1;
	VALUE[8] = #20000 1'b0;
	VALUE[8] = #20000 1'b1;
	VALUE[8] = #40000 1'b0;
	VALUE[8] = #20000 1'b1;
	VALUE[8] = #20000 1'b0;
	VALUE[8] = #40000 1'b1;
	VALUE[8] = #40000 1'b0;
end 
// VALUE[ 7 ]
initial
begin
	VALUE[7] = 1'b0;
	VALUE[7] = #20000 1'b1;
	VALUE[7] = #20000 1'b0;
	VALUE[7] = #20000 1'b1;
	VALUE[7] = #160000 1'b0;
	VALUE[7] = #60000 1'b1;
	VALUE[7] = #40000 1'b0;
	VALUE[7] = #80000 1'b1;
	VALUE[7] = #20000 1'b0;
	VALUE[7] = #20000 1'b1;
	VALUE[7] = #40000 1'b0;
	VALUE[7] = #20000 1'b1;
	VALUE[7] = #20000 1'b0;
	VALUE[7] = #40000 1'b1;
	VALUE[7] = #20000 1'b0;
	VALUE[7] = #40000 1'b1;
	VALUE[7] = #60000 1'b0;
	VALUE[7] = #20000 1'b1;
	VALUE[7] = #40000 1'b0;
	VALUE[7] = #20000 1'b1;
	VALUE[7] = #20000 1'b0;
	VALUE[7] = #40000 1'b1;
	VALUE[7] = #40000 1'b0;
	VALUE[7] = #20000 1'b1;
	VALUE[7] = #40000 1'b0;
	VALUE[7] = #20000 1'b1;
	VALUE[7] = #40000 1'b0;
end 
// VALUE[ 6 ]
initial
begin
	VALUE[6] = 1'b1;
	VALUE[6] = #60000 1'b0;
	VALUE[6] = #20000 1'b1;
	VALUE[6] = #100000 1'b0;
	VALUE[6] = #20000 1'b1;
	VALUE[6] = #20000 1'b0;
	VALUE[6] = #20000 1'b1;
	VALUE[6] = #60000 1'b0;
	VALUE[6] = #20000 1'b1;
	VALUE[6] = #80000 1'b0;
	VALUE[6] = #180000 1'b1;
	VALUE[6] = #60000 1'b0;
	VALUE[6] = #60000 1'b1;
	VALUE[6] = #20000 1'b0;
	VALUE[6] = #20000 1'b1;
	VALUE[6] = #80000 1'b0;
	VALUE[6] = #20000 1'b1;
	VALUE[6] = #20000 1'b0;
	VALUE[6] = #20000 1'b1;
	VALUE[6] = #20000 1'b0;
	VALUE[6] = #80000 1'b1;
end 
// VALUE[ 5 ]
initial
begin
	VALUE[5] = 1'b1;
	VALUE[5] = #20000 1'b0;
	VALUE[5] = #20000 1'b1;
	VALUE[5] = #140000 1'b0;
	VALUE[5] = #40000 1'b1;
	VALUE[5] = #20000 1'b0;
	VALUE[5] = #20000 1'b1;
	VALUE[5] = #20000 1'b0;
	VALUE[5] = #20000 1'b1;
	VALUE[5] = #40000 1'b0;
	VALUE[5] = #80000 1'b1;
	VALUE[5] = #20000 1'b0;
	VALUE[5] = #20000 1'b1;
	VALUE[5] = #40000 1'b0;
	VALUE[5] = #20000 1'b1;
	VALUE[5] = #20000 1'b0;
	VALUE[5] = #20000 1'b1;
	VALUE[5] = #20000 1'b0;
	VALUE[5] = #140000 1'b1;
	VALUE[5] = #20000 1'b0;
	VALUE[5] = #20000 1'b1;
	VALUE[5] = #20000 1'b0;
	VALUE[5] = #20000 1'b1;
	VALUE[5] = #40000 1'b0;
	VALUE[5] = #40000 1'b1;
	VALUE[5] = #40000 1'b0;
	VALUE[5] = #20000 1'b1;
	VALUE[5] = #20000 1'b0;
	VALUE[5] = #20000 1'b1;
end 
// VALUE[ 4 ]
initial
begin
	VALUE[4] = 1'b1;
	VALUE[4] = #20000 1'b0;
	VALUE[4] = #40000 1'b1;
	VALUE[4] = #40000 1'b0;
	VALUE[4] = #60000 1'b1;
	VALUE[4] = #20000 1'b0;
	VALUE[4] = #60000 1'b1;
	VALUE[4] = #40000 1'b0;
	VALUE[4] = #100000 1'b1;
	VALUE[4] = #20000 1'b0;
	VALUE[4] = #20000 1'b1;
	VALUE[4] = #20000 1'b0;
	VALUE[4] = #20000 1'b1;
	VALUE[4] = #60000 1'b0;
	VALUE[4] = #20000 1'b1;
	VALUE[4] = #60000 1'b0;
	VALUE[4] = #120000 1'b1;
	VALUE[4] = #80000 1'b0;
	VALUE[4] = #40000 1'b1;
	VALUE[4] = #20000 1'b0;
	VALUE[4] = #60000 1'b1;
	VALUE[4] = #20000 1'b0;
	VALUE[4] = #40000 1'b1;
end 
// VALUE[ 3 ]
initial
begin
	VALUE[3] = 1'b0;
	VALUE[3] = #20000 1'b1;
	VALUE[3] = #40000 1'b0;
	VALUE[3] = #40000 1'b1;
	VALUE[3] = #20000 1'b0;
	VALUE[3] = #20000 1'b1;
	VALUE[3] = #60000 1'b0;
	VALUE[3] = #120000 1'b1;
	VALUE[3] = #20000 1'b0;
	VALUE[3] = #20000 1'b1;
	VALUE[3] = #40000 1'b0;
	VALUE[3] = #20000 1'b1;
	VALUE[3] = #20000 1'b0;
	VALUE[3] = #80000 1'b1;
	VALUE[3] = #60000 1'b0;
	VALUE[3] = #20000 1'b1;
	VALUE[3] = #20000 1'b0;
	VALUE[3] = #20000 1'b1;
	VALUE[3] = #40000 1'b0;
	VALUE[3] = #40000 1'b1;
	VALUE[3] = #20000 1'b0;
	VALUE[3] = #20000 1'b1;
	VALUE[3] = #20000 1'b0;
	VALUE[3] = #100000 1'b1;
	VALUE[3] = #40000 1'b0;
	VALUE[3] = #20000 1'b1;
end 
// VALUE[ 2 ]
initial
begin
	VALUE[2] = 1'b0;
	VALUE[2] = #20000 1'b1;
	VALUE[2] = #40000 1'b0;
	VALUE[2] = #20000 1'b1;
	VALUE[2] = #20000 1'b0;
	VALUE[2] = #20000 1'b1;
	VALUE[2] = #40000 1'b0;
	VALUE[2] = #20000 1'b1;
	VALUE[2] = #20000 1'b0;
	VALUE[2] = #160000 1'b1;
	VALUE[2] = #100000 1'b0;
	VALUE[2] = #20000 1'b1;
	VALUE[2] = #40000 1'b0;
	VALUE[2] = #80000 1'b1;
	VALUE[2] = #20000 1'b0;
	VALUE[2] = #20000 1'b1;
	VALUE[2] = #60000 1'b0;
	VALUE[2] = #40000 1'b1;
	VALUE[2] = #20000 1'b0;
	VALUE[2] = #60000 1'b1;
	VALUE[2] = #20000 1'b0;
	VALUE[2] = #60000 1'b1;
	VALUE[2] = #40000 1'b0;
	VALUE[2] = #20000 1'b1;
end 
// VALUE[ 1 ]
initial
begin
	VALUE[1] = 1'b0;
	VALUE[1] = #100000 1'b1;
	VALUE[1] = #20000 1'b0;
	VALUE[1] = #40000 1'b1;
	VALUE[1] = #140000 1'b0;
	VALUE[1] = #20000 1'b1;
	VALUE[1] = #20000 1'b0;
	VALUE[1] = #40000 1'b1;
	VALUE[1] = #60000 1'b0;
	VALUE[1] = #40000 1'b1;
	VALUE[1] = #20000 1'b0;
	VALUE[1] = #80000 1'b1;
	VALUE[1] = #20000 1'b0;
	VALUE[1] = #40000 1'b1;
	VALUE[1] = #40000 1'b0;
	VALUE[1] = #20000 1'b1;
	VALUE[1] = #40000 1'b0;
	VALUE[1] = #20000 1'b1;
	VALUE[1] = #20000 1'b0;
	VALUE[1] = #20000 1'b1;
	VALUE[1] = #20000 1'b0;
	VALUE[1] = #40000 1'b1;
	VALUE[1] = #40000 1'b0;
	VALUE[1] = #40000 1'b1;
end 
// VALUE[ 0 ]
initial
begin
	VALUE[0] = 1'b1;
	VALUE[0] = #40000 1'b0;
	VALUE[0] = #140000 1'b1;
	VALUE[0] = #60000 1'b0;
	VALUE[0] = #20000 1'b1;
	VALUE[0] = #20000 1'b0;
	VALUE[0] = #160000 1'b1;
	VALUE[0] = #20000 1'b0;
	VALUE[0] = #40000 1'b1;
	VALUE[0] = #40000 1'b0;
	VALUE[0] = #20000 1'b1;
	VALUE[0] = #20000 1'b0;
	VALUE[0] = #40000 1'b1;
	VALUE[0] = #40000 1'b0;
	VALUE[0] = #20000 1'b1;
	VALUE[0] = #40000 1'b0;
	VALUE[0] = #20000 1'b1;
	VALUE[0] = #100000 1'b0;
	VALUE[0] = #40000 1'b1;
	VALUE[0] = #20000 1'b0;
	VALUE[0] = #40000 1'b1;
	VALUE[0] = #20000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
endmodule

