// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/27/2021 12:53:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RecongniserLogicVerilog
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RecongniserLogicVerilog_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg W;
reg X;
reg Y;
reg Z;
// wires                                               
wire [2:0] State;

// assign statements (if any)                          
RecongniserLogicVerilog i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.State(State),
	.W(W),
	.X(X),
	.Y(Y),
	.Z(Z)
);
initial 
begin 
#1000000 $stop;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #20000 1'b1;
	#20000;
end 

// W
initial
begin
	W = 1'b0;
	W = #100000 1'b1;
	W = #30000 1'b0;
	W = #440000 1'b1;
	W = #40000 1'b0;
	W = #160000 1'b1;
	W = #20000 1'b0;
	W = #100000 1'b1;
	W = #20000 1'b0;
end 

// X
initial
begin
	X = 1'b0;
	X = #160000 1'b1;
	X = #20000 1'b0;
	X = #390000 1'b1;
	X = #40000 1'b0;
	X = #120000 1'b1;
	X = #20000 1'b0;
end 

// Y
initial
begin
	Y = 1'b0;
	Y = #220000 1'b1;
	Y = #60000 1'b0;
	Y = #170000 1'b1;
	Y = #40000 1'b0;
	Y = #200000 1'b1;
	Y = #20000 1'b0;
	Y = #140000 1'b1;
	Y = #20000 1'b0;
end 

// Z
initial
begin
	Z = 1'b0;
	Z = #220000 1'b1;
	Z = #60000 1'b0;
	Z = #90000 1'b1;
	Z = #40000 1'b0;
	Z = #240000 1'b1;
	Z = #20000 1'b0;
	Z = #140000 1'b1;
	Z = #20000 1'b0;
end 
endmodule

