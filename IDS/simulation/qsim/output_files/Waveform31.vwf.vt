// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/27/2021 13:38:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CounterSelecter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CounterSelecter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Reset;
reg [2:0] State;
// wires                                               
wire [3:0] BCD0;
wire [3:0] Di0;
wire [3:0] Di1;
wire [3:0] Di2;
wire [3:0] Di3;
wire [3:0] RippleD0;

// assign statements (if any)                          
CounterSelecter i1 (
// port map - connection between master ports and signals/registers   
	.BCD0(BCD0),
	.Clock(Clock),
	.Di0(Di0),
	.Di1(Di1),
	.Di2(Di2),
	.Di3(Di3),
	.Reset(Reset),
	.RippleD0(RippleD0),
	.State(State)
);
initial 
begin 
#1000000 $stop;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #1000 1'b1;
	#1000;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 
// State[ 2 ]
initial
begin
	State[2] = 1'b1;
	State[2] = #480000 1'b0;
	State[2] = #80000 1'b1;
	State[2] = #340000 1'b0;
end 
// State[ 1 ]
initial
begin
	State[1] = 1'b0;
end 
// State[ 0 ]
initial
begin
	State[0] = 1'b0;
	State[0] = #560000 1'b1;
	State[0] = #340000 1'b0;
end 
endmodule

