// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/23/2021 11:44:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FourDigitSSD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FourDigitSSD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] Di0;
reg [6:0] Di1;
reg [6:0] Di2;
reg [6:0] Di3;
reg Quartz;
// wires                                               
wire [3:0] Anode;
wire [6:0] Cathode;

// assign statements (if any)                          
FourDigitSSD i1 (
// port map - connection between master ports and signals/registers   
	.Anode(Anode),
	.Cathode(Cathode),
	.Di0(Di0),
	.Di1(Di1),
	.Di2(Di2),
	.Di3(Di3),
	.Quartz(Quartz)
);
initial 
begin 
#1000000 $stop;
end 
// Di0[ 6 ]
initial
begin
	Di0[6] = 1'b0;
end 
// Di0[ 5 ]
initial
begin
	Di0[5] = 1'b0;
end 
// Di0[ 4 ]
initial
begin
	Di0[4] = 1'b0;
end 
// Di0[ 3 ]
initial
begin
	Di0[3] = 1'b0;
end 
// Di0[ 2 ]
initial
begin
	Di0[2] = 1'b0;
end 
// Di0[ 1 ]
initial
begin
	Di0[1] = 1'b0;
end 
// Di0[ 0 ]
initial
begin
	Di0[0] = 1'b0;
end 
// Di1[ 6 ]
initial
begin
	Di1[6] = 1'b0;
end 
// Di1[ 5 ]
initial
begin
	Di1[5] = 1'b0;
end 
// Di1[ 4 ]
initial
begin
	Di1[4] = 1'b0;
end 
// Di1[ 3 ]
initial
begin
	Di1[3] = 1'b1;
end 
// Di1[ 2 ]
initial
begin
	Di1[2] = 1'b0;
end 
// Di1[ 1 ]
initial
begin
	Di1[1] = 1'b0;
end 
// Di1[ 0 ]
initial
begin
	Di1[0] = 1'b0;
end 
// Di2[ 6 ]
initial
begin
	Di2[6] = 1'b1;
end 
// Di2[ 5 ]
initial
begin
	Di2[5] = 1'b0;
end 
// Di2[ 4 ]
initial
begin
	Di2[4] = 1'b0;
end 
// Di2[ 3 ]
initial
begin
	Di2[3] = 1'b0;
end 
// Di2[ 2 ]
initial
begin
	Di2[2] = 1'b0;
end 
// Di2[ 1 ]
initial
begin
	Di2[1] = 1'b0;
end 
// Di2[ 0 ]
initial
begin
	Di2[0] = 1'b0;
end 
// Di3[ 6 ]
initial
begin
	Di3[6] = 1'b0;
end 
// Di3[ 5 ]
initial
begin
	Di3[5] = 1'b0;
end 
// Di3[ 4 ]
initial
begin
	Di3[4] = 1'b0;
end 
// Di3[ 3 ]
initial
begin
	Di3[3] = 1'b0;
end 
// Di3[ 2 ]
initial
begin
	Di3[2] = 1'b0;
end 
// Di3[ 1 ]
initial
begin
	Di3[1] = 1'b0;
end 
// Di3[ 0 ]
initial
begin
	Di3[0] = 1'b1;
end 

// Quartz
always
begin
	Quartz = 1'b0;
	Quartz = #10000 1'b1;
	#10000;
end 
endmodule

